// services/chat_analytics.js
const db = require('./db');

class ChatAnalytics {
    constructor() {
        this.sessions = new Map(); // –ö–µ—à –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π
        this.initializeCache();
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–µ—à—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    async initializeCache() {
        try {
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó –≤ –∫–µ—à (—Ç—ñ–ª—å–∫–∏ —Ç—ñ —â–æ —Ä–µ–∞–ª—å–Ω–æ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞—Ä–∞–∑)
            const result = await db.pool.query(`
                SELECT * FROM chat_sessions 
                WHERE status = 'active' 
                AND last_activity > NOW() - INTERVAL '5 minutes'
            `);
            
            result.rows.forEach(session => {
                this.sessions.set(session.conversation_id, {
                    conversationId: session.conversation_id,
                    startTime: session.start_time,
                    lastActivity: session.last_activity,
                    messageCount: session.message_count,
                    userAgent: session.user_agent,
                    ipAddress: session.ip_address,
                    status: session.status
                });
            });
            
            console.log(`üìä Chat Analytics: Loaded ${this.sessions.size} active sessions`);
        } catch (error) {
            console.error('Error initializing cache:', error);
        }
    }

    // –†–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–æ–≤—É —Å–µ—Å—ñ—é
    async startSession(conversationId, userAgent, ipAddress) {
        try {
            if (!this.sessions.has(conversationId)) {
                const session = {
                    conversationId,
                    startTime: new Date(),
                    lastActivity: new Date(),
                    messageCount: 0,
                    userAgent,
                    ipAddress,
                    status: 'active'
                };
                
                this.sessions.set(conversationId, session);
                
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
                await db.pool.query(`
                    INSERT INTO chat_sessions 
                    (conversation_id, start_time, last_activity, user_agent, ip_address, status)
                    VALUES ($1, $2, $3, $4, $5, $6)
                    ON CONFLICT (conversation_id) DO NOTHING
                `, [conversationId, session.startTime, session.lastActivity, userAgent, ipAddress, 'active']);
                
                console.log(`üìä New chat session started: ${conversationId}`);
            }
        } catch (error) {
            console.error('Error starting session:', error);
        }
    }

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    async logMessage(conversationId, messageType, content, responseSource = null) {
        try {
            const timestamp = new Date();
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
            await db.pool.query(`
                INSERT INTO chat_messages 
                (conversation_id, message_type, content, response_source, timestamp)
                VALUES ($1, $2, $3, $4, $5)
            `, [conversationId, messageType, content.substring(0, 500), responseSource, timestamp]);

            // –û–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Å—ñ—é
            if (this.sessions.has(conversationId)) {
                const session = this.sessions.get(conversationId);
                session.messageCount++;
                session.lastActivity = timestamp;
                
                await db.pool.query(`
                    UPDATE chat_sessions 
                    SET message_count = message_count + 1, last_activity = $1
                    WHERE conversation_id = $2
                `, [timestamp, conversationId]);
            }
        } catch (error) {
            console.error('Error logging message:', error);
        }
    }

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É
    async logFeedback(conversationId, isLike, comment, messageSource) {
        try {
            const timestamp = new Date();
            
            await db.pool.query(`
                INSERT INTO chat_feedback 
                (conversation_id, is_like, comment, message_source, timestamp)
                VALUES ($1, $2, $3, $4, $5)
            `, [conversationId, isLike, comment ? comment.substring(0, 500) : null, messageSource, timestamp]);
        } catch (error) {
            console.error('Error logging feedback:', error);
        }
    }

    // –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–µ—Å—ñ—é
    async endSession(conversationId) {
        try {
            if (this.sessions.has(conversationId)) {
                const session = this.sessions.get(conversationId);
                const endTime = new Date();
                const duration = endTime - session.startTime;
                
                await db.pool.query(`
                    UPDATE chat_sessions 
                    SET status = 'ended', end_time = $1, duration = $2
                    WHERE conversation_id = $3
                `, [endTime, duration, conversationId]);
                
                this.sessions.delete(conversationId);
                console.log(`üìä Session ended: ${conversationId} (${session.messageCount} messages)`);
            }
        } catch (error) {
            console.error('Error ending session:', error);
        }
    }

    // –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó
    getActiveSessions() {
        const now = new Date();
        const activeTimeout = 5 * 60 * 1000; // 5 —Ö–≤–∏–ª–∏–Ω

        return Array.from(this.sessions.values()).filter(session => {
            return session.status === 'active' && 
                   (now - session.lastActivity) < activeTimeout;
        });
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
    async getTodayStats() {
        try {
            const now = new Date();
            const todayUTC = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), 0, 0, 0, 0));

            const [sessionsResult, messagesResult, feedbackResult] = await Promise.all([
                db.pool.query('SELECT COUNT(*) FROM chat_sessions WHERE start_time >= $1', [todayUTC]),
                db.pool.query(`
                    SELECT 
                        COUNT(*) FILTER (WHERE message_type = 'user') as total,
                        COUNT(*) FILTER (WHERE message_type = 'bot' AND response_source = 'faq') as faq_count,
                        COUNT(*) FILTER (WHERE message_type = 'bot' AND response_source = 'ai') as ai_count
                    FROM chat_messages 
                    WHERE timestamp >= $1
                `, [todayUTC]),
                db.pool.query(`
                    SELECT 
                        COUNT(*) FILTER (WHERE is_like = true) as likes,
                        COUNT(*) FILTER (WHERE is_like = false) as dislikes
                    FROM chat_feedback 
                    WHERE timestamp >= $1
                `, [todayUTC])
            ]);

            const likes = parseInt(feedbackResult.rows[0].likes) || 0;
            const dislikes = parseInt(feedbackResult.rows[0].dislikes) || 0;
            const totalFeedback = likes + dislikes;
            const satisfactionRate = totalFeedback > 0 ? Math.round((likes / totalFeedback) * 100) : 0;

            return {
                totalSessions: parseInt(sessionsResult.rows[0].count) || 0,
                totalMessages: parseInt(messagesResult.rows[0].total) || 0,
                likes,
                dislikes,
                satisfactionRate,
                responseSourceDistribution: {
                    faq: parseInt(messagesResult.rows[0].faq_count) || 0,
                    ai: parseInt(messagesResult.rows[0].ai_count) || 0
                }
            };
        } catch (error) {
            console.error('Error getting today stats:', error);
            return this.getEmptyStats();
        }
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
    async getWeeklyStats() {
        try {
            const now = new Date();
            const weekAgoUTC = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate() - 7, 0, 0, 0, 0));

            const [sessionsResult, messagesResult, feedbackResult] = await Promise.all([
                db.pool.query('SELECT COUNT(*) FROM chat_sessions WHERE start_time >= $1', [weekAgoUTC]),
                db.pool.query('SELECT COUNT(*) FROM chat_messages WHERE timestamp >= $1 AND message_type = \'user\'', [weekAgoUTC]),
                db.pool.query(`
                    SELECT 
                        COUNT(*) FILTER (WHERE is_like = true) as likes,
                        COUNT(*) FILTER (WHERE is_like = false) as dislikes
                    FROM chat_feedback 
                    WHERE timestamp >= $1
                `, [weekAgoUTC])
            ]);

            const likes = parseInt(feedbackResult.rows[0].likes) || 0;
            const dislikes = parseInt(feedbackResult.rows[0].dislikes) || 0;
            const totalFeedback = likes + dislikes;
            const satisfactionRate = totalFeedback > 0 ? Math.round((likes / totalFeedback) * 100) : 0;

            const dailyStats = await this.getDailyBreakdown(7);

            return {
                totalSessions: parseInt(sessionsResult.rows[0].count) || 0,
                totalMessages: parseInt(messagesResult.rows[0].count) || 0,
                likes,
                dislikes,
                satisfactionRate,
                dailyStats
            };
        } catch (error) {
            console.error('Error getting weekly stats:', error);
            return this.getEmptyStats();
        }
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å
    async getMonthlyStats() {
        try {
            const now = new Date();
            const monthAgoUTC = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate() - 30, 0, 0, 0, 0));

            const [sessionsResult, messagesResult, feedbackResult] = await Promise.all([
                db.pool.query('SELECT COUNT(*) FROM chat_sessions WHERE start_time >= $1', [monthAgoUTC]),
                db.pool.query('SELECT COUNT(*) FROM chat_messages WHERE timestamp >= $1 AND message_type = \'user\'', [monthAgoUTC]),
                db.pool.query(`
                    SELECT 
                        COUNT(*) FILTER (WHERE is_like = true) as likes,
                        COUNT(*) FILTER (WHERE is_like = false) as dislikes
                    FROM chat_feedback 
                    WHERE timestamp >= $1
                `, [monthAgoUTC])
            ]);

            const likes = parseInt(feedbackResult.rows[0].likes) || 0;
            const dislikes = parseInt(feedbackResult.rows[0].dislikes) || 0;
            const totalFeedback = likes + dislikes;
            const satisfactionRate = totalFeedback > 0 ? Math.round((likes / totalFeedback) * 100) : 0;

            const dailyStats = await this.getDailyBreakdown(30);

            return {
                totalSessions: parseInt(sessionsResult.rows[0].count) || 0,
                totalMessages: parseInt(messagesResult.rows[0].count) || 0,
                likes,
                dislikes,
                satisfactionRate,
                dailyStats
            };
        } catch (error) {
            console.error('Error getting monthly stats:', error);
            return this.getEmptyStats();
        }
    }

    // –†–æ–∑–±–∏–≤–∫–∞ –ø–æ –¥–Ω—è—Ö
    async getDailyBreakdown(days) {
        try {
            const result = [];
            const now = new Date();
            const todayUTC = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), 0, 0, 0, 0));

            for (let i = days - 1; i >= 0; i--) {
                const date = new Date(todayUTC);
                date.setUTCDate(date.getUTCDate() - i);
                
                const nextDate = new Date(date);
                nextDate.setUTCDate(nextDate.getUTCDate() + 1);

                const [sessionsResult, messagesResult, feedbackResult] = await Promise.all([
                    db.pool.query(`
                        SELECT COUNT(*) FROM chat_sessions 
                        WHERE start_time >= $1 AND start_time < $2
                    `, [date, nextDate]),
                    db.pool.query(`
                        SELECT 
                            COUNT(*) FILTER (WHERE message_type = 'user') as total,
                            COUNT(*) FILTER (WHERE response_source = 'faq') as faq_count,
                            COUNT(*) FILTER (WHERE response_source = 'ai') as ai_count
                        FROM chat_messages 
                        WHERE timestamp >= $1 AND timestamp < $2
                    `, [date, nextDate]),
                    db.pool.query(`
                        SELECT 
                            COUNT(*) FILTER (WHERE is_like = true) as likes,
                            COUNT(*) FILTER (WHERE is_like = false) as dislikes
                        FROM chat_feedback 
                        WHERE timestamp >= $1 AND timestamp < $2
                    `, [date, nextDate])
                ]);

                result.push({
                    date: date.toISOString().split('T')[0],
                    totalSessions: parseInt(sessionsResult.rows[0].count) || 0,
                    totalMessages: parseInt(messagesResult.rows[0].total) || 0,
                    likes: parseInt(feedbackResult.rows[0].likes) || 0,
                    dislikes: parseInt(feedbackResult.rows[0].dislikes) || 0,
                    responseSourceDistribution: {
                        faq: parseInt(messagesResult.rows[0].faq_count) || 0,
                        ai: parseInt(messagesResult.rows[0].ai_count) || 0
                    }
                });
            }

            return result;
        } catch (error) {
            console.error('Error getting daily breakdown:', error);
            return [];
        }
    }

    // –ü–æ–ø—É–ª—è—Ä–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è
    async getPopularQuestions(limit = 5) {
        try {
            const result = await db.pool.query(`
                SELECT 
                    content as question,
                    COUNT(*) as count
                FROM chat_messages
                WHERE message_type = 'user'
                AND timestamp >= NOW() - INTERVAL '30 days'
                GROUP BY content
                ORDER BY count DESC
                LIMIT $1
            `, [limit]);

            return result.rows;
        } catch (error) {
            console.error('Error getting popular questions:', error);
            return [];
        }
    }

    // –û—Å—Ç–∞–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫–∏
    async getRecentFeedback(limit = 5) {
        try {
            const result = await db.pool.query(`
                SELECT 
                    is_like as "isLike",
                    comment,
                    message_source as source,
                    timestamp
                FROM chat_feedback
                ORDER BY timestamp DESC
                LIMIT $1
            `, [limit]);

            return result.rows.map(f => ({
                isLike: f.isLike,
                icon: f.isLike ? 'üëç' : 'üëé',
                comment: f.comment,
                timestamp: f.timestamp,
                source: f.source
            }));
        } catch (error) {
            console.error('Error getting recent feedback:', error);
            return [];
        }
    }

    // –Ü–Ω—Å–∞–π—Ç–∏ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    async generateInsights(period = 7) {
        const insights = [];
        const stats = period === 7 ? await this.getWeeklyStats() : await this.getMonthlyStats();
        const activeSessions = this.getActiveSessions();

        if (stats.totalSessions < 10) {
            insights.push({
                type: 'warning',
                priority: 'medium',
                message: '–ù–∏–∑—å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —á–∞—Ç-–±–æ—Ç–∞',
                action: '–†–æ–∑–≥–ª—è–Ω—å—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø—Ä–æ–º–æ-–∞–∫—Ü—ñ–π –∞–±–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤–∏–¥–∏–º–æ—Å—Ç—ñ –≤—ñ–¥–∂–µ—Ç—É'
            });
        }

        const dailyStats = stats.dailyStats || [];
        const totalFaq = dailyStats.reduce((sum, day) => sum + (day.responseSourceDistribution?.faq || 0), 0);
        const totalAi = dailyStats.reduce((sum, day) => sum + (day.responseSourceDistribution?.ai || 0), 0);

        if (totalAi > totalFaq * 2) {
            insights.push({
                type: 'info',
                priority: 'low',
                message: 'AI –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —á–∞—Å—Ç—ñ—à–µ –Ω—ñ–∂ FAQ',
                action: '–ú–æ–∂–ª–∏–≤–æ, –≤–∞—Ä—Ç–æ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ –±–∞–∑—É FAQ –ø–æ–ø—É–ª—è—Ä–Ω–∏–º–∏ –ø–∏—Ç–∞–Ω–Ω—è–º–∏'
            });
        }

        if (stats.satisfactionRate < 60) {
            insights.push({
                type: 'alert',
                priority: 'high',
                message: `–ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å –∑–∞–¥–æ–≤–æ–ª–µ–Ω–æ—Å—Ç—ñ: ${stats.satisfactionRate}% üëé`,
                action: '–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —è–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —Ç–∞ –æ–Ω–æ–≤—ñ—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω—å'
            });
        } else if (stats.satisfactionRate >= 80) {
            insights.push({
                type: 'success',
                priority: 'low',
                message: `–í—ñ–¥–º—ñ–Ω–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –∑–∞–¥–æ–≤–æ–ª–µ–Ω–æ—Å—Ç—ñ: ${stats.satisfactionRate}% üëç`,
                action: '–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ'
            });
        }

        if (stats.dislikes > stats.likes) {
            insights.push({
                type: 'warning',
                priority: 'high',
                message: `–ë—ñ–ª—å—à–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –≤—ñ–¥–≥—É–∫—ñ–≤ (${stats.dislikes} üëé vs ${stats.likes} üëç)`,
                action: '–¢–µ—Ä–º—ñ–Ω–æ–≤–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —è–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –±–æ—Ç–∞'
            });
        }

        if (activeSessions.length > 5) {
            insights.push({
                type: 'info',
                priority: 'medium',
                message: `${activeSessions.length} –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞—Ä–∞–∑ –æ–Ω–ª–∞–π–Ω`,
                action: '–ü—ñ–∫–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å - –≤—ñ–¥–º—ñ–Ω–Ω–∏–π —á–∞—Å –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É'
            });
        }

        return insights;
    }

    // –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö
    async exportData() {
        try {
            const [sessions, messages, feedback] = await Promise.all([
                db.pool.query('SELECT * FROM chat_sessions ORDER BY start_time DESC LIMIT 1000'),
                db.pool.query('SELECT * FROM chat_messages ORDER BY timestamp DESC LIMIT 5000'),
                db.pool.query('SELECT * FROM chat_feedback ORDER BY timestamp DESC LIMIT 500')
            ]);

            return {
                sessions: sessions.rows,
                messages: messages.rows,
                feedback: feedback.rows.map(f => ({
                    ...f,
                    feedbackType: f.is_like ? 'like' : 'dislike'
                })),
                exportDate: new Date().toISOString()
            };
        } catch (error) {
            console.error('Error exporting data:', error);
            return { sessions: [], messages: [], feedback: [], exportDate: new Date().toISOString() };
        }
    }

    // –î–∞—à–±–æ—Ä–¥
    async getDashboard() {
        try {
            // –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ today stats
            const today = await this.getTodayStats();
            
            // –¢–µ–ø–µ—Ä —Ä–µ—à—Ç—É –¥–∞–Ω–∏—Ö –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
            const [popularQuestions, recentFeedback, dailyStats] = await Promise.all([
                this.getPopularQuestions(),
                this.getRecentFeedback(),
                this.getDailyBreakdown(7)
            ]);

            const activeSessions = this.getActiveSessions();

            return {
                today,
                popularQuestions,
                recentFeedback,
                activeSessions,
                dailyStats
            };
        } catch (error) {
            console.error('Error building dashboard:', error);
            return {
                today: this.getEmptyStats(),
                popularQuestions: [],
                recentFeedback: [],
                activeSessions: [],
                dailyStats: []
            };
        }
    }

    // –ü—É—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (fallback)
    getEmptyStats() {
        return {
            totalSessions: 0,
            totalMessages: 0,
            likes: 0,
            dislikes: 0,
            satisfactionRate: 0,
            responseSourceDistribution: { faq: 0, ai: 0 },
            dailyStats: []
        };
    }
}

// –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∏–Ω–≥–ª—Ç–æ–Ω
const chatAnalytics = new ChatAnalytics();

module.exports = chatAnalytics;