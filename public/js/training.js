// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
let currentDate = new Date();
let currentView = 'day';
let trainings = [];
let trainers = [];
let userBookings = [];
let selectedBooking = null;

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', function() {
    initializePage();
    loadTrainers();
    loadTrainings();
    loadUserBookings();
});

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
function initializePage() {
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –¥–∞—Ç—É (—Å—å–æ–≥–æ–¥–Ω—ñ)
    const today = new Date();
    const dateFilter = document.getElementById('dateFilter');
    dateFilter.min = today.toISOString().split('T')[0];
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –¥–∞—Ç—É (—á–µ—Ä–µ–∑ 30 –¥–Ω—ñ–≤)
    const maxDate = new Date(today.getTime() + (30 * 24 * 60 * 60 * 1000));
    dateFilter.max = maxDate.toISOString().split('T')[0];
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É
    dateFilter.value = today.toISOString().split('T')[0];
    
    updateDateDisplay();
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—Ä–µ–Ω–µ—Ä—ñ–≤
async function loadTrainers() {
    try {
        // –°–∏–º—É–ª—è—Ü—ñ—è API –≤–∏–∫–ª–∏–∫—É
        trainers = [
            { id: 1, name: '–û–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–µ–Ω–∫–æ', specialization: '–°–∏–ª–æ–≤—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è', avatar: '–û' },
            { id: 2, name: '–ú–∞—Ä—ñ—è –Ü–≤–∞–Ω–µ–Ω–∫–æ', specialization: '–ô–æ–≥–∞ —Ç–∞ –ø—ñ–ª–∞—Ç–µ—Å', avatar: '–ú' },
            { id: 3, name: '–ê–Ω–¥—Ä—ñ–π –ö–æ–≤–∞–ª—å', specialization: '–ö–∞—Ä–¥—ñ–æ —Ç–∞ –∫—Ä–æ—Å—Ñ—ñ—Ç', avatar: '–ê' },
            { id: 4, name: '–ö–∞—Ç–µ—Ä–∏–Ω–∞ –ú–µ–ª—å–Ω–∏–∫', specialization: '–ê–µ—Ä–æ–±—ñ–∫–∞ —Ç–∞ —Ñ—ñ—Ç–Ω–µ—Å', avatar: '–ö' },
            { id: 5, name: '–î–º–∏—Ç—Ä–æ –°–∏–¥–æ—Ä–æ–≤', specialization: '–ë–æ–∫—Å —Ç–∞ —î–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞', avatar: '–î' }
        ];
        
        // –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–µ—Ä—ñ–≤ —É —Ñ—ñ–ª—å—Ç—Ä—ñ
        const trainerSelect = document.getElementById('trainerFilter');
        trainers.forEach(trainer => {
            const option = document.createElement('option');
            option.value = trainer.id;
            option.textContent = trainer.name;
            trainerSelect.appendChild(option);
        });
        
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—Ä–µ–Ω–µ—Ä—ñ–≤:', error);
    }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
async function loadTrainings() {
    try {
        document.getElementById('loadingSchedule').style.display = 'block';
        document.getElementById('scheduleContent').style.display = 'none';
        
        // –°–∏–º—É–ª—è—Ü—ñ—è API –≤–∏–∫–ª–∏–∫—É
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        trainings = generateSampleTrainings();
        
        document.getElementById('loadingSchedule').style.display = 'none';
        document.getElementById('scheduleContent').style.display = 'block';
        
        displayTrainings();
        
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:', error);
        document.getElementById('loadingSchedule').innerHTML = '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É';
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑—Ä–∞–∑–∫–æ–≤–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
function generateSampleTrainings() {
    const types = [
        { type: 'gym', name: '–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω–∏–π –∑–∞–ª', duration: '60 —Ö–≤', price: '200 –≥—Ä–Ω' },
        { type: 'cardio', name: '–ö–∞—Ä–¥—ñ–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è', duration: '45 —Ö–≤', price: '150 –≥—Ä–Ω' },
        { type: 'yoga', name: '–ô–æ–≥–∞', duration: '75 —Ö–≤', price: '180 –≥—Ä–Ω' },
        { type: 'pilates', name: '–ü—ñ–ª–∞—Ç–µ—Å', duration: '60 —Ö–≤', price: '170 –≥—Ä–Ω' },
        { type: 'crossfit', name: '–ö—Ä–æ—Å—Ñ—ñ—Ç', duration: '90 —Ö–≤', price: '250 –≥—Ä–Ω' },
        { type: 'boxing', name: '–ë–æ–∫—Å', duration: '60 —Ö–≤', price: '220 –≥—Ä–Ω' },
        { type: 'swimming', name: '–ü–ª–∞–≤–∞–Ω–Ω—è', duration: '45 —Ö–≤', price: '160 –≥—Ä–Ω' }
    ];
    
    const times = ['08:00', '09:30', '11:00', '14:00', '16:00', '18:00', '19:30', '21:00'];
    const sampleTrainings = [];
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å
    const today = new Date(currentDate);
    
    for (let i = 0; i < 12; i++) {
        const type = types[Math.floor(Math.random() * types.length)];
        const trainer = trainers[Math.floor(Math.random() * trainers.length)];
        const time = times[Math.floor(Math.random() * times.length)];
        const maxParticipants = Math.floor(Math.random() * 10) + 5;
        const currentParticipants = Math.floor(Math.random() * maxParticipants);
        
        const training = {
            id: i + 1,
            type: type.type,
            name: type.name,
            trainer: trainer,
            date: new Date(today),
            time: time,
            duration: type.duration,
            price: type.price,
            maxParticipants: maxParticipants,
            currentParticipants: currentParticipants,
            status: currentParticipants >= maxParticipants ? 'full' : 'available',
            isBooked: false
        };
        
        sampleTrainings.push(training);
    }
    
    return sampleTrainings;
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
function displayTrainings() {
    const trainingGrid = document.getElementById('trainingGrid');
    trainingGrid.innerHTML = '';
    
    const filteredTrainings = applyCurrentFilters();
    
    if (filteredTrainings.length === 0) {
        trainingGrid.innerHTML = `
            <div style="grid-column: 1 / -1; text-align: center; padding: 40px; color: #666;">
                <h3>üòî –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ</h3>
                <p>–°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –¥–∞—Ç—É</p>
            </div>
        `;
        return;
    }
    
    filteredTrainings.forEach(training => {
        const trainingCard = createTrainingCard(training);
        trainingGrid.appendChild(trainingCard);
    });
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
function createTrainingCard(training) {
    const card = document.createElement('div');
    card.className = `training-card ${training.status}`;
    if (training.isBooked) {
        card.classList.add('booked');
    }
    
    const statusText = training.status === 'full' ? '–ù–µ–º–∞—î –º—ñ—Å—Ü—å' : 
                     training.isBooked ? '–ó–∞–ø–∏—Å–∞–Ω–∏–π' : '–î–æ—Å—Ç—É–ø–Ω–æ';
    const statusClass = training.status === 'full' ? 'status-full' : 
                       training.isBooked ? 'status-booked' : 'status-available';
    
    card.innerHTML = `
        <div class="status-badge ${statusClass}">${statusText}</div>
        <div class="training-header">
            <div class="training-type">${training.name}</div>
            <div class="training-time">${training.time}</div>
        </div>
        <div class="trainer-info">
            <div class="trainer-avatar">${training.trainer.avatar}</div>
            <div>
                <div class="trainer-name">${training.trainer.name}</div>
                <div style="font-size: 0.8em; color: #888;">${training.trainer.specialization}</div>
            </div>
        </div>
        <div class="training-details">
            <span class="duration">‚è±Ô∏è ${training.duration}</span>
            <span class="price">üí∞ ${training.price}</span>
        </div>
        <div class="participants">
            üë• ${training.currentParticipants}/${training.maxParticipants} —É—á–∞—Å–Ω–∏–∫—ñ–≤
        </div>
        <button class="book-btn" 
                onclick="openBookingModal(${training.id})"
                ${training.status === 'full' || training.isBooked ? 'disabled' : ''}>
            ${training.isBooked ? '‚úÖ –ó–∞–ø–∏—Å–∞–Ω–∏–π' : training.status === 'full' ? '‚ùå –ù–µ–º–∞—î –º—ñ—Å—Ü—å' : 'üìù –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è'}
        </button>
    `;
    
    return card;
}

// –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
function applyCurrentFilters() {
    const dateFilter = document.getElementById('dateFilter').value;
    const typeFilter = document.getElementById('typeFilter').value;
    const trainerFilter = document.getElementById('trainerFilter').value;
    const timeFilter = document.getElementById('timeFilter').value;
    
    let filtered = trainings.filter(training => {
        // –§—ñ–ª—å—Ç—Ä –ø–æ –¥–∞—Ç—ñ
        const trainingDate = training.date.toISOString().split('T')[0];
        if (dateFilter && trainingDate !== dateFilter) {
            return false;
        }
        
        // –§—ñ–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
        if (typeFilter && training.type !== typeFilter) {
            return false;
        }
        
        // –§—ñ–ª—å—Ç—Ä –ø–æ —Ç—Ä–µ–Ω–µ—Ä—É
        if (trainerFilter && training.trainer.id.toString() !== trainerFilter) {
            return false;
        }
        
        // –§—ñ–ª—å—Ç—Ä –ø–æ —á–∞—Å—É
        if (timeFilter) {
            const hour = parseInt(training.time.split(':')[0]);
            switch (timeFilter) {
                case 'morning':
                    if (hour < 6 || hour >= 12) return false;
                    break;
                case 'afternoon':
                    if (hour < 12 || hour >= 18) return false;
                    break;
                case 'evening':
                    if (hour < 18 || hour >= 22) return false;
                    break;
            }
        }
        
        return true;
    });
    
    return filtered.sort((a, b) => a.time.localeCompare(b.time));
}

// –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
function applyFilters() {
    const dateValue = document.getElementById('dateFilter').value;
    if (dateValue) {
        currentDate = new Date(dateValue);
        updateDateDisplay();
        trainings = generateSampleTrainings();
    }
    displayTrainings();
}

// –ó–º—ñ–Ω–∞ –≤–∏–¥—É (–¥–µ–Ω—å/—Ç–∏–∂–¥–µ–Ω—å)
function setView(view) {
    currentView = view;
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –∫–Ω–æ–ø–∫—É
    document.querySelectorAll('.view-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    event.target.classList.add('active');
    
    // –ü–æ–∫–∏ —â–æ —Ä–µ–∞–ª—ñ–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥–µ–Ω–Ω–∏–π –≤–∏–¥
    if (view === 'week') {
        alert('–¢–∏–∂–Ω–µ–≤–∏–π –≤–∏–¥ –±—É–¥–µ –¥–æ–¥–∞–Ω–∏–π –ø—ñ–∑–Ω—ñ—à–µ');
        setView('day');
        return;
    }
    
    displayTrainings();
}

// –ó–º—ñ–Ω–∞ –¥–∞—Ç–∏
function changeDate(delta) {
    currentDate.setDate(currentDate.getDate() + delta);
    
    // –ù–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ –≤–∏–±–∏—Ä–∞—Ç–∏ –º–∏–Ω—É–ª—ñ –¥–∞—Ç–∏
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    if (currentDate < today) {
        currentDate = new Date(today);
        return;
    }
    
    // –ù–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ –≤–∏–±–∏—Ä–∞—Ç–∏ –¥–∞—Ç–∏ –±—ñ–ª—å—à–µ –Ω—ñ–∂ —á–µ—Ä–µ–∑ 30 –¥–Ω—ñ–≤
    const maxDate = new Date();
    maxDate.setDate(maxDate.getDate() + 30);
    if (currentDate > maxDate) {
        currentDate = new Date(maxDate);
        return;
    }
    
    updateDateDisplay();
    document.getElementById('dateFilter').value = currentDate.toISOString().split('T')[0];
    trainings = generateSampleTrainings();
    displayTrainings();
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–∞—Ç–∏
function updateDateDisplay() {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const displayDate = new Date(currentDate);
    displayDate.setHours(0, 0, 0, 0);
    
    const dateDisplay = document.getElementById('currentDateDisplay');
    
    if (displayDate.getTime() === today.getTime()) {
        dateDisplay.textContent = '–°—å–æ–≥–æ–¥–Ω—ñ';
    } else {
        const tomorrow = new Date(today);
        tomorrow.setDate(tomorrow.getDate() + 1);
        
        if (displayDate.getTime() === tomorrow.getTime()) {
            dateDisplay.textContent = '–ó–∞–≤—Ç—Ä–∞';
        } else {
            dateDisplay.textContent = currentDate.toLocaleDateString('uk-UA', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        }
    }
}

// –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
function openBookingModal(trainingId) {
    const training = trainings.find(t => t.id === trainingId);
    if (!training || training.status === 'full' || training.isBooked) {
        return;
    }
    
    selectedBooking = training;
    
    // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –¥–∞–Ω—ñ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
    document.getElementById('modalTrainingType').textContent = training.name;
    document.getElementById('modalTrainer').textContent = training.trainer.name;
    document.getElementById('modalDateTime').textContent = 
        `${training.date.toLocaleDateString('uk-UA')} –æ ${training.time}`;
    document.getElementById('modalDuration').textContent = training.duration;
    document.getElementById('modalPrice').textContent = training.price;
    
    // –û—á–∏—â—É—î–º–æ —Ñ–æ—Ä–º—É
    document.getElementById('bookingNotes').value = '';
    document.getElementById('bookingSuccess').style.display = 'none';
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    document.getElementById('bookingModal').style.display = 'block';
}

// –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
function closeModal() {
    document.getElementById('bookingModal').style.display = 'none';
    selectedBooking = null;
}

// –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ä–º–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
document.addEventListener('DOMContentLoaded', function() {
    const bookingForm = document.getElementById('bookingForm');
    if (bookingForm) {
        bookingForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            if (!selectedBooking) return;
            
            const notes = document.getElementById('bookingNotes').value;
            
            try {
                // –°–∏–º—É–ª—è—Ü—ñ—è API –≤–∏–∫–ª–∏–∫—É
                const response = await fetch('/book_training', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        trainingId: selectedBooking.id,
                        notes: notes,
                        trainingType: selectedBooking.type,
                        trainerId: selectedBooking.trainer.id,
                        date: selectedBooking.date.toISOString(),
                        time: selectedBooking.time
                    })
                });
                
                if (response.ok) {
                    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
                    selectedBooking.isBooked = true;
                    selectedBooking.currentParticipants += 1;
                    if (selectedBooking.currentParticipants >= selectedBooking.maxParticipants) {
                        selectedBooking.status = 'full';
                    }
                    
                    // –î–æ–¥–∞—î–º–æ –¥–æ –º–æ—ó—Ö –∑–∞–ø–∏—Å—ñ–≤
                    userBookings.push({
                        id: Date.now(),
                        training: selectedBooking,
                        notes: notes,
                        bookingDate: new Date(),
                        status: 'active'
                    });
                    
                    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                    document.getElementById('bookingSuccess').style.display = 'block';
                    
                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    displayTrainings();
                    displayUserBookings();
                    
                    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
                    setTimeout(() => {
                        closeModal();
                    }, 2000);
                    
                } else {
                    throw new Error('–ü–æ–º–∏–ª–∫–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è');
                }
                
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:', error);
                alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–ø–∏—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
            }
        });
    }
});

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function loadUserBookings() {
    try {
        // –°–∏–º—É–ª—è—Ü—ñ—è API –≤–∏–∫–ª–∏–∫—É
        userBookings = [
            {
                id: 1,
                training: {
                    name: '–ô–æ–≥–∞',
                    trainer: { name: '–ú–∞—Ä—ñ—è –Ü–≤–∞–Ω–µ–Ω–∫–æ' },
                    date: new Date(2024, 11, 20),
                    time: '18:00',
                    duration: '75 —Ö–≤'
                },
                notes: '–ü–µ—Ä—à–µ –∑–∞–Ω—è—Ç—Ç—è',
                bookingDate: new Date(2024, 11, 15),
                status: 'active'
            }
        ];
        
        displayUserBookings();
        
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤:', error);
    }
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
function displayUserBookings() {
    const bookingsList = document.getElementById('myBookings');
    
    if (userBookings.length === 0) {
        bookingsList.innerHTML = `
            <div style="text-align: center; padding: 40px; color: #666;">
                <h4>üìù –ó–∞–ø–∏—Å—ñ–≤ –ø–æ–∫–∏ –Ω–µ–º–∞—î</h4>
                <p>–û–±–µ—Ä—ñ—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É –≤–∏—â–µ —Ç–∞ —Å—Ç–≤–æ—Ä—ñ—Ç—å —Å–≤—ñ–π –ø–µ—Ä—à–∏–π –∑–∞–ø–∏—Å!</p>
            </div>
        `;
        return;
    }
    
    bookingsList.innerHTML = '';
    
    userBookings.forEach(booking => {
        const bookingItem = document.createElement('div');
        bookingItem.className = 'booking-item';
        
        const canCancel = canCancelBooking(booking);
        
        bookingItem.innerHTML = `
            <div class="booking-info">
                <h4>${booking.training.name}</h4>
                <p>üßë‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: ${booking.training.trainer.name}</p>
                <p>üìÖ ${booking.training.date.toLocaleDateString('uk-UA')} –æ ${booking.training.time}</p>
                <p>‚è±Ô∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${booking.training.duration}</p>
                ${booking.notes ? `<p>üìù –ü—Ä–∏–º—ñ—Ç–∫–∏: ${booking.notes}</p>` : ''}
            </div>
            <div class="booking-actions">
                <button class="cancel-btn" 
                        onclick="openCancelModal(${booking.id})"
                        ${!canCancel ? 'disabled style="opacity: 0.5;"' : ''}>
                    ${!canCancel ? 'üïê –ù–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏' : '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏'}
                </button>
            </div>
        `;
        
        bookingsList.appendChild(bookingItem);
    });
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å
function canCancelBooking(booking) {
    const now = new Date();
    const trainingDateTime = new Date(booking.training.date);
    const [hours, minutes] = booking.training.time.split(':');
    trainingDateTime.setHours(parseInt(hours), parseInt(minutes));
    
    // –ú–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –º—ñ–Ω—ñ–º—É–º –∑–∞ 2 –≥–æ–¥–∏–Ω–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É
    const timeDiff = trainingDateTime.getTime() - now.getTime();
    const hoursDiff = timeDiff / (1000 * 60 * 60);
    
    return hoursDiff > 2 && booking.status === 'active';
}

// –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
function openCancelModal(bookingId) {
    const booking = userBookings.find(b => b.id === bookingId);
    if (!booking || !canCancelBooking(booking)) {
        return;
    }
    
    selectedBooking = booking;
    
    // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –¥–µ—Ç–∞–ª—ñ –∑–∞–ø–∏—Å—É
    document.getElementById('cancelBookingDetails').innerHTML = `
        <div class="detail-row">
            <span class="label">–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:</span>
            <span class="value">${booking.training.name}</span>
        </div>
        <div class="detail-row">
            <span class="label">–¢—Ä–µ–Ω–µ—Ä:</span>
            <span class="value">${booking.training.trainer.name}</span>
        </div>
        <div class="detail-row">
            <span class="label">–î–∞—Ç–∞ —Ç–∞ —á–∞—Å:</span>
            <span class="value">${booking.training.date.toLocaleDateString('uk-UA')} –æ ${booking.training.time}</span>
        </div>
    `;
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    document.getElementById('cancelModal').style.display = 'block';
}

// –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
function closeCancelModal() {
    document.getElementById('cancelModal').style.display = 'none';
    selectedBooking = null;
}

// –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
async function confirmCancel() {
    if (!selectedBooking) return;
    
    try {
        // –°–∏–º—É–ª—è—Ü—ñ—è API –≤–∏–∫–ª–∏–∫—É
        const response = await fetch('/cancel_booking', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                bookingId: selectedBooking.id
            })
        });
        
        if (response.ok) {
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å—É
            selectedBooking.status = 'cancelled';
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
            const training = trainings.find(t => t.id === selectedBooking.training.id);
            if (training) {
                training.isBooked = false;
                training.currentParticipants = Math.max(0, training.currentParticipants - 1);
                training.status = 'available';
            }
            
            // –í–∏–¥–∞–ª—è—î–º–æ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
            userBookings = userBookings.filter(b => b.id !== selectedBooking.id);
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            displayTrainings();
            displayUserBookings();
            
            // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
            closeCancelModal();
            
            alert('‚úÖ –ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ!');
            
        } else {
            throw new Error('–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è');
        }
        
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è:', error);
        alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
}

// –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –Ω–∏–º–∏
window.onclick = function(event) {
    const bookingModal = document.getElementById('bookingModal');
    const cancelModal = document.getElementById('cancelModal');
    
    if (event.target === bookingModal) {
        closeModal();
    } else if (event.target === cancelModal) {
        closeCancelModal();
    }
}