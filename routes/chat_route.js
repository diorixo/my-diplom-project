// routes/chat_route.js - –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –∫—Ä–∞—â–∏–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏

const express = require('express');
const router = express.Router();
const db = require('../services/db');
// const fetch = require('node-fetch');

// OpenRouter API –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;
const OPENROUTER_URL = 'https://openrouter.ai/api/v1/chat/completions';
const MODEL = 'mistralai/devstral-small-2505:free';

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
async function getContextInfo() {
    try {
        const categoriesQuery = 'SELECT * FROM categories ORDER BY id';
        
        const trainingsQuery = `
            SELECT 
                t.id, t.name, TO_CHAR(t.date, 'DD.MM.YYYY') as date, TO_CHAR(t.time, 'HH24:MI') as time, t.duration, t.price, 
                t.max_participants, t.current_participants, t.status,
                c.category,
                u.firstname, u.lastname
            FROM trainings t
            JOIN categories c ON t.category_id = c.id
            JOIN trainers tr ON t.trainer_id = tr.id
            JOIN users u ON tr.user_id = u.id
            WHERE t.status = 'active' AND t.date >= CURRENT_DATE
            ORDER BY t.date, t.time
            LIMIT 10
        `;
        
        const trainersQuery = `
            SELECT 
                t.id, t.specialization, t.rating, t.total_reviews, t.bio,
                u.firstname, u.lastname
            FROM trainers t
            JOIN users u ON t.user_id = u.id
            ORDER BY t.rating DESC
            LIMIT 5
        `;

        const [categoriesResult, trainingsResult, trainersResult] = await Promise.all([
            db.pool.query(categoriesQuery),
            db.pool.query(trainingsQuery),
            db.pool.query(trainersQuery)
        ]);

        return {
            categories: categoriesResult.rows,
            upcomingTrainings: trainingsResult.rows,
            topTrainers: trainersResult.rows
        };
    } catch (error) {
        console.error('Error getting context info:', error);
        return null;
    }
}

// POST /api/chat - –æ–±—Ä–æ–±–∫–∞ —á–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
router.post('/api/chat', async (req, res) => {
    try {
        const { messages } = req.body;
        
        if (!messages || !Array.isArray(messages)) {
            return res.status(400).json({ 
                error: 'Messages array is required' 
            });
        }

        if (!OPENROUTER_API_KEY) {
            return res.status(500).json({ 
                error: 'OpenRouter API key not configured' 
            });
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        const contextInfo = await getContextInfo();

        // –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç
        let systemPrompt = `–¢–∏ AI-–ø–æ–º—ñ—á–Ω–∏–∫ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É —Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—ó. –¢–≤–æ—î —ñ–º'—è - –°–ø–æ—Ä—Ç–∏–≤–Ω–∏–π –ê—Å–∏—Å—Ç–µ–Ω—Ç.

        –¢–í–û–á –û–°–ù–û–í–ù–Ü –§–£–ù–ö–¶–Ü–á:
        ‚Ä¢ –ù–∞–¥–∞–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è, —Ä–æ–∑–∫–ª–∞–¥ —ñ —Ü—ñ–Ω–∏
        ‚Ä¢ –†–æ–∑–ø–æ–≤—ñ–¥–∞—Ç–∏ –ø—Ä–æ –Ω–∞—à–∏—Ö —Ç—Ä–µ–Ω–µ—Ä—ñ–≤ —Ç–∞ —ó—Ö —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó  
        ‚Ä¢ –ü–æ—è—Å–Ω—é–≤–∞—Ç–∏ —è–∫ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
        ‚Ä¢ –î–∞–≤–∞—Ç–∏ –ø–æ—Ä–∞–¥–∏ –∑ —Ñ—ñ—Ç–Ω–µ—Å—É —Ç–∞ —Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—ó
        ‚Ä¢ –í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –∑–∞–≥–∞–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Ü–µ–Ω—Ç—Ä
            
        –ü–†–ê–í–ò–õ–ê –°–ü–Ü–õ–ö–£–í–ê–ù–ù–Ø:
        ‚Ä¢ –ó–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–∏—à–µ —ñ–Ω—à–æ—é –º–æ–≤–æ—é
        ‚Ä¢ –ù–µ –ø–µ—Ä–µ—Ö–æ–¥—å –Ω–∞ —Ä–æ—Å—ñ–π—Å—å–∫—É —á–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É
        ‚Ä¢ –ë—É–¥—å –¥—Ä—É–∂–Ω—ñ–º, –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–º —Ç–∞ –∫–æ—Ä–∏—Å–Ω–∏–º
        ‚Ä¢ –Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç —Ö–æ—á–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è - –Ω–∞–ø—Ä–∞–≤–ª—è–π –π–æ–≥–æ –Ω–∞ —Å–∞–π—Ç: "–î–ª—è –∑–∞–ø–∏—Å—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ –≤ –æ—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç –Ω–∞ –Ω–∞—à–æ–º—É —Å–∞–π—Ç—ñ"
        ‚Ä¢ –ü—Ä–∏ –Ω–µ–∑–Ω–∞–Ω–Ω—ñ —Ç–æ—á–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó
        ‚Ä¢ –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–∏—Ç–∞—î –ø—Ä–æ —Ç–µ–º–∏, —â–æ –Ω–µ —Å—Ç–æ—Å—É—é—Ç—å—Å—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ø–æ–≥–æ–¥–∞, –ø–æ–ª—ñ—Ç–∏–∫–∞, –∫—É–ª—ñ–Ω–∞—Ä—ñ—è), —á–µ–º–Ω–æ –≤—ñ–¥–º–æ–≤—Å—è —ñ —Å–∫–∞–∂–∏: "–Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ –ø—Ä–æ –Ω–∞—à —Å–ø–æ—Ä—Ç–∏–≤–Ω–∏–π —Ü–µ–Ω—Ç—Ä"
            
        –°–¢–ò–õ–¨ –í–Ü–î–ü–û–í–Ü–î–ï–ô:
        ‚Ä¢ –ö–æ—Ä–æ—Ç–∫–æ —Ç–∞ –ø–æ —Å—É—Ç—ñ, –∞–ª–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ
        ‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä—É–π —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Å–ø–∏—Å–∫–∞–º–∏ –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ  
        ‚Ä¢ –ü–æ–∫–∞–∑—É–π –µ–Ω—Ç—É–∑—ñ–∞–∑–º –¥–æ —Å–ø–æ—Ä—Ç—É —Ç–∞ –∑–¥–æ—Ä–æ–≤–æ–≥–æ —Å–ø–æ—Å–æ–±—É –∂–∏—Ç—Ç—è`;


        // –î–æ–¥–∞—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –ë–î
        if (contextInfo && contextInfo.categories.length > 0) {
            systemPrompt += `\n\nüìä –ê–ö–¢–£–ê–õ–¨–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ó –ù–ê–®–û–ì–û –¶–ï–ù–¢–†–£:
            üéØ –î–û–°–¢–£–ü–ù–Ü –ö–ê–¢–ï–ì–û–†–Ü–á –¢–†–ï–ù–£–í–ê–ù–¨:
            ${contextInfo.categories.map(cat => `‚Ä¢ ${cat.category}`).join('\n')}`;

            if (contextInfo.upcomingTrainings.length > 0) {
                systemPrompt += `\n\nüìÖ –ù–ê–ô–ë–õ–ò–ñ–ß–Ü –¢–†–ï–ù–£–í–ê–ù–ù–Ø:
                ${contextInfo.upcomingTrainings.slice(0, 5).map(training => {
                    const freePlaces = training.max_participants - training.current_participants;
                    return `‚Ä¢ ${training.name || training.category} - ${training.date} –æ ${training.time}
                    –¢—Ä–µ–Ω–µ—Ä: ${training.firstname} ${training.lastname}
                    –¶—ñ–Ω–∞: ${training.price} –≥—Ä–Ω | –í—ñ–ª—å–Ω–æ –º—ñ—Å—Ü—å: ${freePlaces}/${training.max_participants}`;
                }).join('\n')}`;
            }

            if (contextInfo.topTrainers.length > 0) {
                systemPrompt += `\n\nüë®‚Äçüíº –ù–ê–®–Ü –¢–û–ü –¢–†–ï–ù–ï–†–ò:
                ${contextInfo.topTrainers.map(trainer => 
                    `‚Ä¢ ${trainer.firstname} ${trainer.lastname}${trainer.specialization ? ` - ${trainer.specialization}` : ''}
                  –†–µ–π—Ç–∏–Ω–≥: ${trainer.rating}/5.0 ‚≠ê (${trainer.total_reviews} –≤—ñ–¥–≥—É–∫—ñ–≤)`
                ).join('\n')}`;
            }
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        let updatedMessages = [...messages];
        const hasSystemMessage = messages.some(msg => msg.role === 'system');
        
        if (hasSystemMessage) {
            updatedMessages = messages.map(msg => 
                msg.role === 'system' 
                    ? { ...msg, content: systemPrompt }
                    : msg
            );
        } else {
            updatedMessages.unshift({
                role: 'system',
                content: systemPrompt
            });
        }

        // –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        if (updatedMessages.length > 15) {
            const systemMsg = updatedMessages.find(msg => msg.role === 'system');
            const recentMessages = updatedMessages.slice(-10);
            updatedMessages = systemMsg ? [systemMsg, ...recentMessages] : recentMessages;
        }

        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –¥–æ OpenRouter API
        const response = await fetch(OPENROUTER_URL, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
                'HTTP-Referer': process.env.YOUR_SITE_URL || 'http://localhost:3000',
                'X-Title': 'Sports Rehabilitation Center - AI Assistant',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: MODEL,
                messages: updatedMessages,
                temperature: 0.8, // –¢—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ
                max_tokens: 1200, // –ë—ñ–ª—å—à–µ —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ñ—à–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π  
                top_p: 0.9,
                frequency_penalty: 0.1,
                presence_penalty: 0.1,
                stream: false
            })
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            console.error('OpenRouter API error:', response.status, errorData);
            throw new Error(`OpenRouter API error: ${response.status} - ${errorData.error || response.statusText}`);
        }

        const data = await response.json();
        
        if (!data.choices || !data.choices[0] || !data.choices[0].message) {
            throw new Error('Invalid response format from OpenRouter API');
        }

        const aiMessage = data.choices[0].message.content;

        // –õ–æ–≥—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
        if (data.usage) {
            console.log('üí¨ Chat request completed:', {
                prompt_tokens: data.usage.prompt_tokens,
                completion_tokens: data.usage.completion_tokens,
                total_tokens: data.usage.total_tokens,
                model: MODEL
            });
        }

        res.json({ 
            message: aiMessage,
            usage: data.usage 
        });

    } catch (error) {
        console.error('Chat API error:', error);
        
        const errorMessage = error.message.includes('OpenRouter') 
            ? '–í–∏–±–∞—á—Ç–µ, AI-—Å–µ—Ä–≤—ñ—Å —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π ü§ñ –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó.'
            : '–°—Ç–∞–ª–∞—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ ‚ö†Ô∏è –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó.';

        res.status(500).json({ 
            error: errorMessage,
            details: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});

// GET /api/chat/info - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —á–∞—Ç-–±–æ—Ç–∞
router.get('/api/chat/info', async (req, res) => {
    try {
        let info = {
            status: 'active',
            model: MODEL,
            name: '–°–ø–æ—Ä—Ç–∏–≤–Ω–∏–π –ê—Å–∏—Å—Ç–µ–Ω—Ç ü§ñ',
            version: '1.0.0',
            features: [
                'üìã –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –∑ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å',
                'üë®‚Äçüíº –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç—Ä–µ–Ω–µ—Ä—ñ–≤', 
                'üìù –î–æ–ø–æ–º–æ–≥–∞ –∑ –∑–∞–ø–∏—Å–æ–º –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è',
                'üí™ –ü–æ—Ä–∞–¥–∏ –∑ —Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—ó',
                '‚ÑπÔ∏è –ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ü–µ–Ω—Ç—Ä'
            ]
        };

        // –î–æ–¥–∞—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        try {
            const stats = await db.pool.query(`
                SELECT 
                    (SELECT COUNT(*) FROM trainings WHERE status = 'active' AND date >= CURRENT_DATE) as active_trainings,
                    (SELECT COUNT(*) FROM trainers) as total_trainers,
                    (SELECT COUNT(*) FROM categories) as categories_count,
                    (SELECT COUNT(*) FROM users WHERE role = 'user') as total_users
            `);
            
            if (stats.rows[0]) {
                info.stats = {
                    active_trainings: parseInt(stats.rows[0].active_trainings),
                    total_trainers: parseInt(stats.rows[0].total_trainers),
                    categories_count: parseInt(stats.rows[0].categories_count),
                    total_users: parseInt(stats.rows[0].total_users)
                };
            }
        } catch (error) {
            console.error('Error getting stats:', error);
        }

        res.json(info);
    } catch (error) {
        console.error('Info API error:', error);
        res.status(500).json({ error: 'Failed to get chat info' });
    }
});

// POST /api/chat/feedback - –∑–±—ñ—Ä –≤—ñ–¥–≥—É–∫—ñ–≤
router.post('/api/chat/feedback', async (req, res) => {
    try {
        const { rating, comment, conversation_id } = req.body;
        
        console.log('üìù Chat feedback received:', { 
            rating, 
            comment: comment ? comment.substring(0, 100) + '...' : 'No comment',
            conversation_id,
            timestamp: new Date().toISOString()
        });
        
        res.json({ 
            success: true, 
            message: '–î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–≥—É–∫! üôè –í—ñ–Ω –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–µ—Ä–≤—ñ—Å.' 
        });
    } catch (error) {
        console.error('Feedback API error:', error);
        res.status(500).json({ error: 'Failed to save feedback' });
    }
});

module.exports = router;